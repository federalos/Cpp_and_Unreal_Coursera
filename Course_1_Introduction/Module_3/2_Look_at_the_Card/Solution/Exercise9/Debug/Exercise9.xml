<?xml version="1.0"?>
<doc>
    <assembly>
        "Exercise9"
    </assembly>
    <members>
        <member name="M:exercise9.Random.Next(System.Int32)">
 Returns a non-negative random integer that is less than the specified
		maximum
 @param MaxValue The exclusive upper bound of the random number
		to be generated. maxValue must be greater than or equal to 0 and
		less than or equal to
 @return A 32-bit signed integer that is greater than or equal to 0,
		and less than maxValue; that is, the range of return values
		includes 0 but not maxValue


 Returns a non-negative random integer that is less than the specified
		maximum
 @param MaxValue The exclusive upper bound of the random number
		to be generated. maxValue must be greater than or equal to 0 and
		less than or equal to
 @return A 32-bit signed integer that is greater than or equal to 0,
		and less than maxValue; that is, the range of return values
		includes 0 but not maxValue

</member>
        <member name="M:exercise9.Random.Initialize">
Initializes the random number generator


Initializes the random number generator

</member>
        <member name="T:exercise9.Random">
@brief A random number generator

</member>
        <member name="M:exercise9.Deck.Print">
Prints the cards in the deck, top to bottom


Prints the cards in the deck, top to bottom

</member>
        <member name="M:exercise9.Deck.TakeTopCard">
 Takes the top card from the deck. If the deck is empty, throws
		an exception
 @return top card


 Takes the top card from the deck. If the deck is empty, throws
		an exception
 @return top card

</member>
        <member name="M:exercise9.Deck.Shuffle">
Shuffles the deck


Shuffles the deck
@see http://download.oracle.com/javase/1.5.0/docs/api/java/util/Collections.html#shuffle%28java.util.List%29

</member>
        <member name="M:exercise9.Deck.Cut(System.UInt32)">
Cuts the deck of cards at the given location
@param Location location at which to cut the deck


Cuts the deck of cards at the given location
@param Location location at which to cut the deck

</member>
        <member name="M:exercise9.Deck.IsEmpty">
Gets whether or not the deck is empty
@return true if the deck is empty, false otherwise


Gets whether or not the deck is empty
@return true if the deck is empty, false otherwise

</member>
        <member name="M:exercise9.Deck.#ctor">
Constructor


Constructor

</member>
        <member name="T:exercise9.Deck">
A deck of cards

</member>
        <member name="M:exercise9.Card.Print">
Flips the card over


Prints the card

</member>
        <member name="M:exercise9.Card.FlipOver">
Flips the card over


Flips the card over

</member>
        <member name="M:exercise9.Card.IsFaceUp">
Gets whether or not the card is face up
@return true if face up, false if face down


Gets whether or not the card is face up
@return true if face up, false if face down

</member>
        <member name="M:exercise9.Card.GetSuit">
Gets the card suit
@return suit


Gets the card suit
@return suit

</member>
        <member name="M:exercise9.Card.GetRank">
Gets the card rank
@return rank


Gets the card rank
@return rank

</member>
        <member name="M:exercise9.Card.#ctor(exercise9.Rank,exercise9.Suit)">
Constructs a card with the given rank and suit
@param Rank rank
@param Suit suit


Constructs a card with the given rank and suit
@param Rank rank
@param Suit suit

</member>
        <member name="T:exercise9.Card">
A playing card

</member>
        <member name="T:exercise9.Suit">
An enumeration for card suits

</member>
        <member name="T:exercise9.Rank">
An enumeration for card ranks

</member>
    </members>
</doc>